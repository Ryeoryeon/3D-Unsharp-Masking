#version 330 core
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec4 vertexColor_diffuse;
layout(location = 2) in vec3 vertexColor_ambient;
layout(location = 3) in vec3 vertexColor_specular;
layout(location = 4) in vec3 vertexNormal_modelspace;

out vec3 Position_worldspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
out vec3 vertexNormal_cameraspace;

out vec3 unsharpVector;
out vec3 currentNormal_cameraspace;

uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform mat4 Transform;
uniform vec3 LightPosition_worldspace;

uniform isampler2D neighborNum;
uniform isampler2D neighborIdxList;
uniform isampler2D accumNeighborNum;
uniform sampler2D neighborPos;
uniform sampler2D neighborNormal;

uniform float TEXTURESIZE_FLOAT = 1024.0;

void main()
{
    gl_Position =  MVP * Transform * vec4(vertexPosition_modelspace,1);

    vec3 diffuseColor = vec3(vertexColor_diffuse);
    //vec3 ambientColor = vec3(vertexColor_ambient);
    vec3 ModifiedAmbientColor = clamp(vertexColor_ambient, 0.1, 1.0) * diffuseColor;
    vec3 specularColor = vertexColor_specular;

    Position_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;
    vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace,1)).xyz;
    EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

    vec3 LightPosition_cameraspace = (V * vec4(LightPosition_worldspace, 1)).xyz;
    LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;

    vertexNormal_cameraspace = ( V * M * vec4(vertexNormal_modelspace, 0)).xyz;

    // *** get 1-ring neighborhood number
    float colIdx = gl_VertexID/TEXTURESIZE_FLOAT;
    float quotient = floor(colIdx);
    float rowIdx = quotient/TEXTURESIZE_FLOAT;
    colIdx -= quotient;

    int currentNeighborNum = texture(neighborNum, vec2(colIdx, rowIdx)).r;
    int startVertexIdx = texture(accumNeighborNum, vec2(colIdx, rowIdx)).r;
    int endVertexIdx = startVertexIdx + currentNeighborNum;

    // illumination color 계산을 위한 변수들
    vec3 avgIntensity = vec3(0, 0, 0);
    vec3 LightColor = vec3(1,1,1);
    float LightPower = 30.0f;

    vec3 l = normalize(LightDirection_cameraspace);
    vec3 E = normalize(EyeDirection_cameraspace);
    float distance = length( LightPosition_worldspace - Position_worldspace );    

    for (int i = startVertexIdx; i < endVertexIdx; i++)
    {
        // 현재 vertex의 이웃에 순차적으로 접근
        float i_float = float(i);
        float neighborColIdx = i_float/TEXTURESIZE_FLOAT;
        float neighborQuotient = floor(neighborColIdx);
        float neighborRowIdx = neighborQuotient/TEXTURESIZE_FLOAT;
        int currentNeighborIdx = texture(neighborIdxList, vec2(neighborColIdx, neighborRowIdx)).r;

        // 이웃의 정보 가져오기
        float neighborInforColIdx = currentNeighborIdx/TEXTURESIZE_FLOAT;
        float neighborInforQuotient = floor(neighborInforColIdx);
        float neighborInforRowIdx = neighborInforQuotient/TEXTURESIZE_FLOAT;
        neighborInforColIdx -= neighborInforQuotient;

        vec3 neighborNormal = texture(neighborNormal, vec2(neighborInforColIdx, neighborInforRowIdx)).rgb;
        vec3 neighborPos = texture(neighborPos, vec2(neighborInforColIdx, neighborInforRowIdx)).rgb;
        vec3 neighborPos_cameraspace = ( V * M * vec4(neighborPos, 1)).xyz;

        // *** 이웃들의 illumination color 계산
        vec3 neighborNormal_cameraspace = ( V * M * vec4(neighborNormal, 0)).xyz;
        vec3 n_neighbor = normalize(neighborNormal_cameraspace);
        vec3 R = reflect (-l, n_neighbor);
        float cosAlpha = clamp( dot( E, R ), 0,1 );
        float cosTheta = clamp( dot( n_neighbor,l), 0,1 );
        float distanceNeighbor = length( LightPosition_worldspace - neighborPos );

        vec3 neighborColor = ModifiedAmbientColor + diffuseColor * LightColor * LightPower * cosTheta / (distanceNeighbor*distanceNeighbor) + specularColor * LightColor * LightPower * pow(cosAlpha,5) / (distanceNeighbor*distanceNeighbor);

        avgIntensity += neighborColor;
    }

    float neighborNum_float = float(currentNeighborNum);
    avgIntensity /= neighborNum_float;

    // *** 현재 vertex의 illumination color 계산
    vec3 n = normalize(vertexNormal_cameraspace);
    vec3 R = reflect (-l, n);
    float cosAlpha = clamp( dot( E,R ), 0,1 );
    float cosTheta = clamp( dot( n,l), 0,1 );

    vec3 currentColor = ModifiedAmbientColor + diffuseColor * LightColor * LightPower * cosTheta / (distance*distance) + specularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);

    // *** 평균과의 차 구하고, 내보내기
    unsharpVector = currentColor - avgIntensity;
    unsharpVector += currentColor;

    //unsharpVector = currentColor; // 원래 color 내보내기
}
